<!-- TEMPLATE -->
<script id="hitTemplate" language="x-template">
    {{#thumbnail}}
        <style>
            .hit__{{uuid}}.hit .hit--thumbnail:before {
                background-image: url({{thumbnail}});
            }
        </style>
    {{/thumbnail}}

    {{#background}}
        <style>
            .hit__{{uuid}}.hit .hit--content {
                background-image: url({{background}});
            }
        </style>
    {{/background}}

    <article class="hit hit__{{uuid}}">
        <div class="hit--thumbnail"></div>

        <div class="hit--content">
            <h3 class="hit--title">{{{highlightedName}}}</h3>

            <div class="hit--description">
                {{#highlightedDescription}}
                <p>{{{highlightedDescription}}}</p>
                {{/highlightedDescription}}

                {{#isMatchingInNotDisplayedAttributes}}
                <ul class="hit--matching">
                    {{#matchingAttributes}}
                    <li>{{label}}: {{{value}}}</li>
                    {{/matchingAttributes}}
                </ul>
                {{/isMatchingInNotDisplayedAttributes}}
            </div>
        </div>
    </article>
</script>

<!-- JS -->
var hitTemplate = $('#hitTemplate').html();
search.addWidget(instantsearch.widgets.hits({
	container: '#hits',
	hitsPerPage: 10,
	templates: {
		item: hitTemplate
	},
	transformData: {
		item: transformItem
	}
}));

function transformItem(data) {
	// Thumbnail
	var thumbnail = _.get(data, 'images.thumbnail');
	if (thumbnail) {
		thumbnail = cloudinary(thumbnail, {
			width: 200,
			quality: 90,
			crop: 'scale',
			format: 'auto'
		});
	} else {
		thumbnail = './css/img/hit-default.jpg';
	}
	
	// Background image
	var background = _.get(data, 'images.background');
	if (background) {
		var backgroundOptions = {
			width: 450,
			quality: 90,
			crop: 'scale',
			format: 'auto'
		};
		background = cloudinary(background, backgroundOptions);
	} else {
		background = './css/img/profile-bg-default.gif';
	}
	
	// If the match is not obvious (not in the name of description), we display
	// where it is found
	var matchingAttributes = getMatchingAttributes(data);
	var readableMatchingAttributes = [];
	var isFoundInName = _.has(matchingAttributes, 'name');
	var isFoundInDescription = _.has(matchingAttributes, 'description');
	if (!isFoundInName && !isFoundInDescription) {
		(function () {
			// Merging aliases and secret identities
			var hasAliases = _.has(matchingAttributes, 'aliases');
			var hasSecretIdentities = _.has(matchingAttributes, 'secretIdentities');
			if (hasAliases || hasSecretIdentities) {
				matchingAttributes.aliases = _.concat(_.get(matchingAttributes, 'aliases', []), _.get(matchingAttributes, 'secretIdentities', []));
				delete matchingAttributes.secretIdentities;
			}
			
			var readableTitles = {
				aliases: 'Also known as',
				authors: 'Authors',
				powers: 'Powers',
				teams: 'Teams'
			};
			_.each(matchingAttributes, function (value, key) {
				if (_.isArray(value)) {
					value = value.join(', ');
				}
				readableMatchingAttributes.push({
					label: readableTitles[key],
					value: value
				});
			});
		})();
	}
	var isMatchingInNotDisplayedAttributes = !_.isEmpty(readableMatchingAttributes);
	
	return {
		uuid: data.objectID,
		highlightedName: getHighlightedValue(data, 'name'),
		highlightedDescription: getHighlightedValue(data, 'description'),
		thumbnail: thumbnail,
		background: background,
		matchingAttributes: readableMatchingAttributes,
		isMatchingInNotDisplayedAttributes: isMatchingInNotDisplayedAttributes
	};
}